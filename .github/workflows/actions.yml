name: CI Workflow

# Define when the workflow will run
on:
  push:
    branches:
      - main  # Trigger when changes are pushed to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger for pull requests targeting the 'main' branch

env:
  DOCKER_IMAGE_NAME: saaignment3-Namrata
  HF_SPACE_REPO_URL: https://huggingface.co/spaces/Namratakghodke/Housing_Price
  SONAR_PROJECT_KEY: namrataonlinetrainingorg
  SONAR_ORGANIZATION: placework459
  SONAR_HOST_URL: https://sonarcloud.io/organizations/placework459/projects

# Define the jobs that will run in this workflow
jobs:
  build:
    # This defines the environment to run the job on (ubuntu-latest, windows-latest, etc.)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Specify the Python version to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Adjust based on your dependencies

      # Step 4: Run tests
      - name: Run Pytest with coverage and html report
        run: |
          mkdir -p reports
          pytest --cov=tests --cov-report=term --cov-report=html --cov-report=xml --html=reports/report.html --self-contained-html --junitxml=reports/reports.xml 
          
      # Step 5: Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: reports/report.html

      #- name: Upload Coverage to Codecov
      # uses: codecov/codecov-action@v4
      # with:
      #   file: reports/reports.xml
      #    flags: unittests
      #    fail_ci_if_error: true
      #    verbose: true

      # Step 6: SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ env.SONAR_ORGANIZATION }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      # Step 7: Get Commit hash
      - name: Get Commit hash
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Step 8: Build Docker Image with commit hash
      - name: Build Docker Image with commit hash
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.GIT_SHA }} \
                       -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .

      # Step 9: Scan Docker images with Trivy
      - name: Scan Docker images with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.GIT_SHA }}
          format: table
          exit-code: 1 # fail if vulnerabilities are found 
          severity: "CRITICAL,HIGH"
          
      # Step 10: Push Docker Image
      - name: Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.GIT_SHA }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      # Step 11: Install Git LFS and Push to Hugging Face Space
      - name: Install Git LFS and Push to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Ensure git-lfs is installed (GitHub runners usually have it, but good practice)
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install --system # Initialize LFS for the system

          # The 'actions/checkout' step above has already cloned your repository
          # and fetched LFS files because of `lfs: true` and `Workspace-depth: 0`.

          # Set up user for potential commits if needed (though direct push might not require a new commit)
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          
          echo "Setting remote for Hugging Face Space"
          # Add the Hugging Face Space as a remote.
          # The URL uses oauth2 for token-based authentication.
          git remote add huggingface https://oauth2:${HF_TOKEN}@${HF_SPACE_REPO_URL#https://}
          
          echo "Pushing to Hugging Face Space: ${{ env.HF_SPACE_REPO_URL }}"
          # Push the main branch to the Hugging Face Space.
          # --force is used to overwrite the history on the Space, ensuring it matches your GitHub repo.
          # This should resolve the "shallow update not allowed" because the local repo now has full history.
          # LFS files will be pushed automatically.
          git push --force huggingface main
          
          echo "Successfully pushed to Hugging Face Space"

      # Step 12: Slack Notification
      - name: Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo, message, author, job, ref
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
